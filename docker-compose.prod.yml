version: '3.8'

services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: vega-backend-prod
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
    env_file:
      - ./agenbotc/.env
    volumes:
      - ./agenbotc/uploads:/app/agenbotc/uploads
      - ./agenbotc/vectorstore:/app/agenbotc/vectorstore
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - vega-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: vega-frontend-prod
    restart: unless-stopped
    expose:
      - "80"
    depends_on:
      - backend
    networks:
      - vega-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: vega-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - vega-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: vega-redis-prod
    restart: unless-stopped
    volumes:
      - redis_data:/data
    networks:
      - vega-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: vega-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=vega
      - POSTGRES_USER=vega
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - vega-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vega"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  redis_data:
  postgres_data:

networks:
  vega-network:
    driver: bridge
